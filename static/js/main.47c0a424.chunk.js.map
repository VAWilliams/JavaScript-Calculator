{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","BUTTONS","id","value","type","doesEndWithOperator","isDecimal","isOperator","props","handleOperator","bind","handleNumber","state","currentValue","expression","event","target","getAttribute","this","setState","result","eval","newValue","test","replace","endsWith","buttons","map","button","onClick","data-type","data-value","Component"],"mappings":"qPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,m7CErItBC,QAAU,CACd,CACEC,GAAI,QACJC,MAAO,KACPC,KAAM,YACN,CACAF,GAAI,SACJC,MAAO,IACPC,KAAM,YACN,CACAF,GAAI,WACJC,MAAO,IACPC,KAAM,YACN,CACAF,GAAI,QACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,QACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,OACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,WACJC,MAAO,IACPC,KAAM,YACN,CACAF,GAAI,OACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,OACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,MACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,MACJC,MAAO,IACPC,KAAM,YACN,CACAF,GAAI,MACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,MACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,QACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,SACJC,MAAO,IACPC,KAAM,YACN,CACAF,GAAI,OACJC,MAAO,IACPC,KAAM,UACN,CACAF,GAAI,UACJC,MAAO,IACPC,KAAM,WAKJC,oBAAsB,UACtBC,UAAY,WACZC,WAAa,SAEbnB,I,0bACJ,aAAYoB,GAAQ,IAAD,2NACjB,mBAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,kNACtB,EAAKC,aAAiB,EAAKA,aAAaD,KAAlB,kNACtB,EAAKE,MAAQ,CACXC,aAAc,EACdC,WAAY,IANG,E,oQASJC,OACb,IAAIb,GAAQa,MAAMC,OAAOC,aAAa,MAClCd,MAAQY,MAAMC,OAAOC,aAAa,cAEtCC,KAAKC,UAAS,SAAAP,OAAU,IACdC,aAA6BD,MAA7BC,aAAcC,WAAeF,MAAfE,WACpB,OAAOZ,IACH,IAAK,SACD,IAAIkB,OAASC,KAAKP,YAClB,MAAO,CACHD,aAAcO,OACdN,WAAYM,QAEpB,IAAK,QACD,MAAO,CACHP,aAAc,EACdC,WAAY,GAEpB,QACE,IAAIQ,SAAW,KAQf,OAJIA,SAHCjB,oBAAoBkB,KAAKT,YAGfP,WAAWgB,KAAuB,IAAjBV,aAAqB,GAAKA,eACtB,IAAjBA,aAAqB,GAAKA,cAAeW,QAAQjB,WAAYJ,QAC7C,IAAjBU,aAAqB,GAAKA,cAAgBV,MAJ7CA,MAMR,CACHU,aAAcS,SACdR,WAAcT,oBAAoBkB,KAAqB,IAAfT,WAAmB,GAAKA,aAA0B,MAAVX,OAAkB,KAAKoB,KAAKT,aAC7E,IAAfA,WAAmB,GAAKA,YAAaU,QAAQ,WAAYrB,QAC3C,IAAfW,WAAmB,GAAKA,YAAcX,a,mCAKxDY,GACX,IAAIZ,EAAQY,EAAMC,OAAOC,aAAa,cAEtCC,KAAKC,UAAS,SAAAP,GAAU,IAChBC,EAA6BD,EAA7BC,aAAcC,EAAeF,EAAfE,WAChBQ,EAAW,KAMf,OAJEA,EADEjB,oBAAoBkB,KAAKT,GAChBX,GAEkB,IAAjBU,EAAqB,GAAKA,GAAgBV,EAEpDG,UAAUiB,KAAKV,IAA2B,MAAVV,GAChC,UAAGU,GAAeY,SAAS,MAAkB,MAAVtB,EADmBS,EAGnD,CACHC,aAAcS,EACdR,YAA4B,IAAfA,EAAmB,GAAKA,IACP,IAAjBD,GAAgC,IAAVV,EAAc,EAAIA,S,+BAKnD,IAAD,OACHuB,EAAUzB,QAAQ0B,KAAI,SAAAC,GAAW,IAC7B1B,EAAoB0B,EAApB1B,GAAIE,EAAgBwB,EAAhBxB,KAAMD,EAAUyB,EAAVzB,MAChB,OACE,qEACED,GAAIA,EACJ2B,QAAkB,aAATzB,EAAsB,EAAKK,eAAiB,EAAKE,aAC1DmB,YAAW1B,EACX2B,aAAsB,MAAV5B,EAAgB,IAAMA,GAEjCA,MAVA,EAc4Be,KAAKN,MAAlCE,EAdC,EAcDA,WAAYD,EAdX,EAcWA,aAClB,OACE,kEAAKX,GAAG,cACN,kEAAKA,GAAG,UACN,kEAAKA,GAAG,WACLY,GAEH,sEACGD,IAGL,kEAAKX,GAAG,WACLwB,Q,KA9FOM,8CAqGH5C,2B","file":"static/js/main.47c0a424.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\n\nconst BUTTONS = [\n  {\n    id: \"clear\",\n    value: \"AC\",\n    type: \"operator\"\n  },{\n    id: \"divide\",\n    value: \"/\",\n    type: \"operator\"\n  },{\n    id: \"multiply\",\n    value: \"X\",\n    type: \"operator\"\n  },{\n    id: \"seven\",\n    value: \"7\",\n    type: \"number\"\n  },{\n    id: \"eight\",\n    value: \"8\",\n    type: \"number\"\n  },{\n    id: \"nine\",\n    value: \"9\",\n    type: \"number\"\n  },{\n    id: \"subtract\",\n    value: \"-\",\n    type: \"operator\"\n  },{\n    id: \"four\",\n    value: \"4\",\n    type: \"number\"\n  },{\n    id: \"five\",\n    value: \"5\",\n    type: \"number\"\n  },{\n    id: \"six\",\n    value: \"6\",\n    type: \"number\"\n  },{\n    id: \"add\",\n    value: \"+\",\n    type: \"operator\"\n  },{\n    id: \"one\",\n    value: \"1\",\n    type: \"number\"\n  },{\n    id: \"two\",\n    value: \"2\",\n    type: \"number\"\n  },{\n    id: \"three\",\n    value: \"3\",\n    type: \"number\"\n  },{\n    id: \"equals\",\n    value: \"=\",\n    type: \"operator\"\n  },{\n    id: \"zero\",\n    value: \"0\",\n    type: \"number\"\n  },{\n    id: \"decimal\",\n    value: \".\",\n    type: \"number\"\n  }\n];\nconst\n      //doesStartWithZero = /^0/,\n      doesEndWithOperator = /[*/+-]$/,\n      isDecimal = /\\d+\\.\\d+/, //isAbnormalDecimal = /\\.\\./,\n      isOperator = /[*/+-]/;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleNumber   = this.handleNumber.bind(this);\n    this.state = {\n      currentValue: 0,\n      expression: \"\"\n    };\n  }\n  handleOperator(event) {\n    let id    = event.target.getAttribute('id'),\n        value = event.target.getAttribute('data-value');\n    \n    this.setState(state => {\n        let { currentValue, expression } = state;\n        switch(id) {\n            case 'equals':\n                let result = eval(expression);\n                return {\n                    currentValue: result,\n                    expression: result\n                };\n            case 'clear':\n                return {\n                    currentValue: 0,\n                    expression: 0\n                };\n            default:\n              let newValue = null;\n              if (!doesEndWithOperator.test(expression)) {\n                  newValue = value;\n              } else {\n                  newValue = isOperator.test((currentValue === 0 ? \"\" : currentValue))\n                             ? ((currentValue === 0 ? \"\" : currentValue)).replace(isOperator, value)\n                             : (currentValue === 0 ? \"\" : currentValue) + value;\n              }\n              return {\n                  currentValue: newValue,\n                  expression: ((doesEndWithOperator.test((expression === 0 ? \"\" : expression)) && value !== '-') || /-$/.test(expression))\n                              ? ((expression === 0 ? \"\" : expression)).replace(/[*/+-]+$/, value) \n                              : (expression === 0 ? \"\" : expression) + value\n              }\n        }\n    });\n  }\n  handleNumber(event) {\n    let value = event.target.getAttribute('data-value');\n    \n    this.setState(state => {\n      let { currentValue, expression } = state;\n      let newValue = null;\n      if (doesEndWithOperator.test(expression)) {\n        newValue = value;\n      } else {\n        newValue = (currentValue === 0 ? \"\" : currentValue) + value;\n      }\n      if (isDecimal.test(currentValue) && value === '.') return state;\n      if (`${currentValue}`.endsWith('.') && value === '.') return state;\n      \n      return {\n          currentValue: newValue,\n          expression: (expression === 0 ? \"\" : expression) +\n                      (currentValue === 0 && value === 0 ? 0 : value)\n      }\n      \n    });\n  }\n  render() {\n    let buttons = BUTTONS.map(button => {\n      let { id, type, value } = button;\n      return (\n        <button\n          id={id}\n          onClick={type === \"operator\" ? this.handleOperator : this.handleNumber}\n          data-type={type}\n          data-value={value === 'X' ? '*' : value}\n        >\n          {value}\n        </button>\n      );\n    });\n    let { expression, currentValue } = this.state;\n    return (\n      <div id=\"calculator\">\n        <div id=\"screen\">\n          <div id=\"display\">\n            {expression}\n          </div>\n          <div>\n            {currentValue}\n          </div>\n        </div>\n        <div id=\"buttons\">\n          {buttons}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}